import { Event } from '../types';
import { format, parseISO } from 'date-fns';

// Hong Kong timezone
const HK_TIMEZONE = 'Asia/Hong_Kong';

// Format date for Google Calendar URL (YYYYMMDDTHHMMSS) - for local time
const formatDateForGoogle = (date: Date): string => {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${year}${month}${day}T${hours}${minutes}${seconds}`;
};

// Format date for ICS file (YYYYMMDDTHHMMSS without Z) - for use with TZID
const formatDateForICS = (date: Date): string => {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  const hours = String(date.getHours()).padStart(2, '0');
  const minutes = String(date.getMinutes()).padStart(2, '0');
  const seconds = String(date.getSeconds()).padStart(2, '0');
  return `${year}${month}${day}T${hours}${minutes}${seconds}`;
};

// Create Hong Kong local time (times are already Hong Kong local)
const createHongKongLocalTime = (dateStr: string, timeStr: string): Date => {
  const eventDate = parseISO(dateStr);
  const [hours, minutes] = timeStr.split(':').map(Number);
  
  // Create the Hong Kong local time directly
  const localTime = new Date(eventDate);
  localTime.setHours(hours, minutes, 0, 0);
  
  return localTime;
};

// Convert Hong Kong local time to UTC for Google Calendar (which expects UTC)
const convertHongKongToUTC = (hongKongTime: Date): Date => {
  // Hong Kong is UTC+8, so subtract 8 hours to get UTC
  return new Date(hongKongTime.getTime() - (8 * 60 * 60 * 1000));
};

// Generate Google Calendar URLs for events (opens directly in browser)
export const openGoogleCalendarEvents = (events: Event[], userAgenda: Record<string, string | undefined>): void => {
  // For single event, open directly in Google Calendar
  // For multiple events, download ICS and redirect to Google Calendar import
  
  if (events.length === 1) {
    // Single event - open directly in Google Calendar
    const event = events[0];
    const arrivalTime = userAgenda[event.id] || event.time;
    if (!event.date || !arrivalTime) {
      downloadICSFileForGoogle(events, userAgenda);
      return;
    }
    
    const localDateTime = createHongKongLocalTime(event.date, arrivalTime);
    const startDateTime = localDateTime;
    const endDateTime = new Date(startDateTime.getTime() + (60 * 60 * 1000)); // 1 hour duration
    
    const googleUrl = new URL('https://calendar.google.com/calendar/render');
    googleUrl.searchParams.set('action', 'TEMPLATE');
    googleUrl.searchParams.set('text', `${event.name} - World's 50 Best Bars 2025`);
    googleUrl.searchParams.set('dates', `${formatDateForGoogle(startDateTime)}/${formatDateForGoogle(endDateTime)}`);
    googleUrl.searchParams.set('details', `${event.description}\n\nFeaturing: ${event.feature_bar}\n\nYour arrival time: ${arrivalTime} (Hong Kong time)\n\nGenerated by World's 50 Best Bars Event Planner`);
    googleUrl.searchParams.set('location', `${event.venue}, ${event.location}`);
    googleUrl.searchParams.set('ctz', HK_TIMEZONE);
    
    window.open(googleUrl.toString(), '_blank');
  } else {
    // Multiple events - download ICS and help user import to Google Calendar
    downloadICSFileForGoogle(events, userAgenda);
  }
};

// Legacy function for backward compatibility
export const generateGoogleCalendarLink = (events: Event[], userAgenda: Record<string, string | undefined>): string => {
  openGoogleCalendarEvents(events, userAgenda);
  return '';
};

// Generate ICS file content for Apple Calendar and Google Calendar
export const generateICSContent = (events: Event[], userAgenda: Record<string, string | undefined>): string => {
  const now = new Date();
  const timestamp = formatDateForICS(now);

  let icsContent = [
    'BEGIN:VCALENDAR',
    'VERSION:2.0',
    'PRODID:-//World\'s 50 Best Bars Event Planner//EN',
    'CALSCALE:GREGORIAN',
    'METHOD:PUBLISH',
    'X-WR-CALNAME:World\'s 50 Best Bars 2025 - My Agenda',
    'X-WR-CALDESC:Personal agenda for World\'s 50 Best Bars 2025 awards week',
    'X-WR-TIMEZONE:Asia/Hong_Kong'
  ];

  events.forEach((event, index) => {
    const arrivalTime = userAgenda[event.id] || event.time;
    
    if (!event.date || !arrivalTime) return; // Skip TBA events

    // Use Hong Kong local time (no conversion needed since times are already local)
    const localDateTime = createHongKongLocalTime(event.date, arrivalTime);
    
    // Set duration to exactly 1 hour
    const endDateTime = new Date(localDateTime.getTime() + (60 * 60 * 1000));

    const startTime = formatDateForICS(localDateTime);
    const endTime = formatDateForICS(endDateTime);
    
    const eventId = `${event.id}-${timestamp}@asia50best.com`;
    const location = `${event.venue}${event.hotel ? `, ${event.hotel}` : ''}, ${event.location}`;
    
    // Clean description for ICS format
    const description = event.description
      .replace(/\n/g, '\\n')
      .replace(/,/g, '\\,')
      .replace(/;/g, '\\;');

    const eventLines = [
      'BEGIN:VEVENT',
      `UID:${eventId}`,
      `DTSTAMP:${timestamp}`,
      `DTSTART;TZID=${HK_TIMEZONE}:${startTime}`,
      `DTEND;TZID=${HK_TIMEZONE}:${endTime}`,
      `SUMMARY:${event.name} - World's 50 Best Bars 2025`,
      `DESCRIPTION:${description}\\n\\nFeaturing: ${event.feature_bar}\\n\\nYour arrival time: ${arrivalTime} (Hong Kong time)\\n\\nGenerated by World's 50 Best Bars Event Planner: https://bar.app/`,
      `LOCATION:${location}`,
      `CATEGORIES:World's 50 Best Bars,Cocktails,Events`,
      'STATUS:CONFIRMED',
      'TRANSP:OPAQUE',
      'END:VEVENT'
    ];

    icsContent = icsContent.concat(eventLines);
  });

  icsContent.push('END:VCALENDAR');
  
  return icsContent.join('\r\n');
};

// Download ICS file for Google Calendar import
export const downloadICSFileForGoogle = (events: Event[], userAgenda: Record<string, string | undefined>): void => {
  const icsContent = generateICSContent(events, userAgenda);
  const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = 'world-50-best-bars-2025-agenda.ics';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  // Clean up the URL object
  URL.revokeObjectURL(url);
  
  // After download, automatically open Google Calendar import page
  setTimeout(() => {
    const googleImportUrl = 'https://calendar.google.com/calendar/u/0/r/settings/import';
    window.open(googleImportUrl, '_blank');
  }, 500);
};

// Download ICS file (for Apple Calendar and other apps)
export const downloadICSFile = (events: Event[], userAgenda: Record<string, string | undefined>): void => {
  const icsContent = generateICSContent(events, userAgenda);
  const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = 'world-50-best-bars-2025-agenda.ics';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  // Clean up the URL object
  URL.revokeObjectURL(url);
};

// Track calendar export analytics
export const trackCalendarExport = (type: 'google' | 'apple' | 'google_ics', eventCount: number): void => {
  if (typeof window !== 'undefined' && window.gtag) {
    window.gtag('event', 'calendar_export', {
      event_category: 'agenda',
      event_label: type,
      value: eventCount,
      custom_parameters: {
        export_type: type,
        event_count: eventCount
      }
    });
  }
};
