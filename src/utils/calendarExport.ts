import { Event } from '../types';
import { format, parseISO } from 'date-fns';

// Format date for Google Calendar URL (YYYYMMDDTHHMMSSZ)
const formatDateForGoogle = (date: Date): string => {
  return date.toISOString().replace(/[-:]/g, '').replace(/\.\d{3}/, '');
};

// Format date for ICS file (YYYYMMDDTHHMMSSZ)
const formatDateForICS = (date: Date): string => {
  return date.toISOString().replace(/[-:]/g, '').replace(/\.\d{3}/, '');
};

// Convert local time (UTC+8) to UTC for ICS format
const convertToUTC = (localDate: Date): Date => {
  // Create a new date object and subtract 8 hours to convert from UTC+8 to UTC
  const utcDate = new Date(localDate.getTime() - (8 * 60 * 60 * 1000));
  return utcDate;
};

// Generate Google Calendar URL for a single event (deprecated - now using ICS for multiple events)
export const generateGoogleCalendarLink = (events: Event[], userAgenda: Record<string, string | undefined>): string => {
  // For Google Calendar, we now generate an ICS file instead of using the URL API
  // This is because the URL API only supports single events
  downloadICSFile(events, userAgenda);
  return ''; // Return empty string since we're downloading instead of opening URL
};

// Generate ICS file content for Apple Calendar and Google Calendar
export const generateICSContent = (events: Event[], userAgenda: Record<string, string | undefined>): string => {
  const now = new Date();
  const timestamp = formatDateForICS(now);

  let icsContent = [
    'BEGIN:VCALENDAR',
    'VERSION:2.0',
    'PRODID:-//Asia\'s 50 Best Bars Event Planner//EN',
    'CALSCALE:GREGORIAN',
    'METHOD:PUBLISH',
    'X-WR-CALNAME:Asia\'s 50 Best Bars 2025 - My Agenda',
    'X-WR-CALDESC:Personal agenda for Asia\'s 50 Best Bars 2025 awards week',
    'X-WR-TIMEZONE:Asia/Hong_Kong'
  ];

  events.forEach((event, index) => {
    const arrivalTime = userAgenda[event.id] || event.time;
    
    if (!event.date || !arrivalTime) return; // Skip TBA events

    const eventDate = parseISO(event.date);
    const [hours, minutes] = arrivalTime.split(':').map(Number);
    
    // Create the local time (UTC+8) first
    const localStartDateTime = new Date(eventDate);
    localStartDateTime.setHours(hours, minutes, 0, 0);
    
    // Convert to UTC for ICS format
    const startDateTime = convertToUTC(localStartDateTime);
    
    // Set duration to exactly 1 hour
    const endDateTime = new Date(startDateTime);
    endDateTime.setHours(startDateTime.getHours() + 1);

    const startTime = formatDateForICS(startDateTime);
    const endTime = formatDateForICS(endDateTime);
    
    const eventId = `${event.id}-${timestamp}@asia50best.com`;
    const location = `${event.venue}${event.hotel ? `, ${event.hotel}` : ''}, ${event.location}`;
    
    // Clean description for ICS format
    const description = event.description
      .replace(/\n/g, '\\n')
      .replace(/,/g, '\\,')
      .replace(/;/g, '\\;');

    const eventLines = [
      'BEGIN:VEVENT',
      `UID:${eventId}`,
      `DTSTAMP:${timestamp}`,
      `DTSTART:${startTime}`,
      `DTEND:${endTime}`,
      `SUMMARY:${event.name} - Asia's 50 Best Bars 2025`,
      `DESCRIPTION:${description}\\n\\nFeaturing: ${event.feature_bar}\\n\\nYour arrival time: ${arrivalTime} (UTC+8)\\n\\nGenerated by Asia's 50 Best Bars Event Planner: https://bar.app/`,
      `LOCATION:${location}`,
      `CATEGORIES:Asia's 50 Best Bars,Cocktails,Events`,
      'STATUS:CONFIRMED',
      'TRANSP:OPAQUE',
      'END:VEVENT'
    ];

    icsContent = icsContent.concat(eventLines);
  });

  icsContent.push('END:VCALENDAR');
  
  return icsContent.join('\r\n');
};

// Download ICS file
export const downloadICSFile = (events: Event[], userAgenda: Record<string, string | undefined>): void => {
  const icsContent = generateICSContent(events, userAgenda);
  const blob = new Blob([icsContent], { type: 'text/calendar;charset=utf-8' });
  const url = URL.createObjectURL(blob);
  
  const link = document.createElement('a');
  link.href = url;
  link.download = 'asia-50-best-bars-2025-agenda.ics';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  
  // Clean up the URL object
  URL.revokeObjectURL(url);
};

// Track calendar export analytics
export const trackCalendarExport = (type: 'google' | 'apple' | 'google_ics', eventCount: number): void => {
  if (typeof window !== 'undefined' && window.gtag) {
    window.gtag('event', 'calendar_export', {
      event_category: 'agenda',
      event_label: type,
      value: eventCount,
      custom_parameters: {
        export_type: type,
        event_count: eventCount
      }
    });
  }
};
